version: '1'

setup:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi@sha256:d59863621d3ba1b9bd47f76950c751e842405f9c303d0d4d4298d964b664ee85
  script: |
    #!/usr/bin/env bash

    GH_TOKEN=$(cat "$WORKSPACE/git-token")
    OWNER=$(jq -r '.services[] | select(.toolchain_binding.name=="app-repo") | .parameters.owner_id' /toolchain/toolchain.json)
    REPO=$(jq -r '.services[] | select(.toolchain_binding.name=="app-repo") | .parameters.repo_name' /toolchain/toolchain.json)
    REPO=${REPO%.git}
    curl -u ":$GH_TOKEN" https://github.ibm.com/api/v3/repos/$OWNER/$REPO/branches/master/protection -XPUT -d '{"required_pull_request_reviews":{"dismiss_stale_reviews":true},"required_status_checks":{"strict":true,"contexts":["tekton/code-branch-protection","tekton/code-unit-tests","tekton/code-cis-check","tekton/code-vulnerability-scan","tekton/code-detect-secrets","tekton/code-bom-check"]},"enforce_admins":null,"restrictions":null}'

    npm ci

test:
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi@sha256:d59863621d3ba1b9bd47f76950c751e842405f9c303d0d4d4298d964b664ee85
  script: |
    #!/usr/bin/env bash

    cd ../"$(load_repo app-repo path)"
    npm ci
    
    # save exit code for old evidence collection
    exit_code=0
    npm test || exit_code=$?
    
    # save status for new evidence collection
    status="success"
    if [ "$exit_code" != "0" ]; then
      status="failure"
    fi
    
    collect-evidence \
      --tool-type "jest" \
      --status "$status" \
      --evidence-type "com.ibm.unit_tests" \
      --asset-type "repo" \
      --asset-key "app-repo"
    exit $exit_code

containerize:
  dind: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi@sha256:d59863621d3ba1b9bd47f76950c751e842405f9c303d0d4d4298d964b664ee85
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi

    source scripts/build_setup.sh
    source scripts/build.sh

deploy:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image@sha256:c1e9d5a9674a093635c386f96d35781aea7cad6cc1da86991ee1a85c854216f8
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi

    source scripts/deploy_setup.sh
    source scripts/deploy.sh

dynamic-scan: 
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image@sha256:c1e9d5a9674a093635c386f96d35781aea7cad6cc1da86991ee1a85c854216f8
  script: |
    #!/usr/bin/env bash

    export APP_URL=$(cat ../app-url)

    # feature preivew this until evidence locker v2 usage is full feature ready 
    # can be triggered, and owasp will run
    
    export_env "app-url"
    source "${ONE_PIPELINE_PATH}"/tools/trigger-task
    trigger-task "owasp-zap" "dynamic_scan"

acceptance-test:
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image@sha256:c1e9d5a9674a093635c386f96d35781aea7cad6cc1da86991ee1a85c854216f8
  script: |
    #!/usr/bin/env bash

    source /root/.nvm/nvm.sh
    npm ci
    export APP_URL=$(cat ../app-url)
    
    # save exit code for old evidence collection
    exit_code=0
    npm run acceptance-test || exit_code=$?
    
    # save status for new evidence collection
    status="success"
    if [ "$exit_code" != "0" ]; then
      status="failure"
    fi
    
    collect-evidence \
      --tool-type "jest" \
      --status "$status" \
      --evidence-type "com.ibm.acceptance_tests" \
      --asset-type "repo" \
      --asset-key "app-repo"
    exit $exit_code

release:
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image@sha256:c1e9d5a9674a093635c386f96d35781aea7cad6cc1da86991ee1a85c854216f8
  script: |
    #!/usr/bin/env bash

    source scripts/release.sh

owasp-zap:
  dind: true
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image@sha256:c1e9d5a9674a093635c386f96d35781aea7cad6cc1da86991ee1a85c854216f8
  script: |
    #!/usr/bin/env bash
    
    source scripts/zap/trigger_zap_scans
